---
import Icon from "@components/ui/icons/Icon.astro";

const { count, description, index } = Astro.props;

interface Props {
  count: string;
  description: string;
  index: number;
}

// Extraer el valor numérico y el sufijo (si existe)
const numericValue = count.replace(/[^0-9.,]/g, '');
const suffix = count.replace(/[0-9.,]/g, '');

// Determinar si el número tiene decimales
const hasDecimals = numericValue.includes(',') || numericValue.includes('.');
const decimalPlaces = hasDecimals ? (numericValue.split(',')[1]?.length || numericValue.split('.')[1]?.length || 0) : 0;

// Normalizar el valor numérico (reemplazar comas por puntos para cálculos)
const normalizedValue = numericValue.replace(',', '.');
---

<li class="-m-0.5 flex flex-col p-4 sm:p-8 stats-item" 
    data-target={normalizedValue} 
    data-suffix={suffix} 
    data-decimals={decimalPlaces}>
  <div
    class="mb-2 flex items-end gap-x-2 text-3xl font-bold text-neutral-800 dark:text-neutral-200 sm:text-5xl"
  >
    {index === 1 || index === 2 ? <Icon name="arrowUp" /> : null}
    <span class="counter-value">0</span>{suffix}
  </div>
  <p class="text-sm text-neutral-600 dark:text-neutral-400 sm:text-base">
    {description}
  </p>
</li>

<script is:inline>
  // Función para animar el contador
  function animateCounter(element, target, duration) {
    if (!element || !target) return;
    
    // Asegurarse de que target sea un número
    var targetNum = parseFloat(target);
    if (isNaN(targetNum)) return;
    
    // Verificar si ya se ha completado la animación
    var animated = element.getAttribute('data-animated');
    if (animated === 'true') return;
    
    var counter = element.querySelector('.counter-value');
    var decimals = parseInt(element.getAttribute('data-decimals') || '0');
    var steps = 60; // Número total de pasos de animación
    var increment = targetNum / steps; // Incremento por paso
    var interval = duration / steps; // Tiempo entre pasos
    
    // Marcar como animado para evitar repeticiones
    element.setAttribute('data-animated', 'false');
    
    // Obtener el sufijo si existe
    var suffix = element.getAttribute('data-suffix') || '';
    
    // Obtener el número de decimales
    var decimals = parseInt(element.getAttribute('data-decimals') || '0');
    
    var currentValue = 0;
    var step = 0;
    
    // Limpiar temporizador anterior si existe
    if (element._timer) {
      clearInterval(element._timer);
      element._timer = null;
    }
    element._timer = setInterval(() => {
      step++;
      
      // Calcular el valor actual basado en el paso actual
      currentValue = step >= steps ? targetNum : (increment * step);
      
      // Formatear el número con los decimales correctos
      if (decimals > 0) {
        counter.textContent = currentValue.toFixed(decimals).replace('.', ',');
      } else {
        counter.textContent = Math.round(currentValue).toString();
      }
      
      // Detener cuando llegamos al final
      if (step >= steps) {
        clearInterval(element._timer);
        element._timer = null;
        element.setAttribute('data-animated', 'true'); // Marcar como animado
      }
    }, interval);
  }

  // Configurar el Intersection Observer
  document.addEventListener('DOMContentLoaded', () => {
    const statsItems = document.querySelectorAll('.stats-item');
    let hasBeenVisible = false;
    
    if (!statsItems.length) return;
    
    // Configurar el observador de intersección
    var sectionObserver = new IntersectionObserver(function(entries) {
      entries.forEach(function(entry) {
        // Si la sección sale completamente de la vista
        if (!entry.isIntersecting && hasBeenVisible) {
          // Resetear el estado de animación para todos los elementos
          for (var i = 0; i < statsItems.length; i++) {
            statsItems[i].setAttribute('data-animated', 'false');
          }
          hasBeenVisible = false;
        } else if (entry.isIntersecting) {
          hasBeenVisible = true;
        }
      });
    }, { threshold: 0 }); // Umbral 0 para detectar cuando sale completamente
    
    // Observar el contenedor de estadísticas
    var statsContainer = statsItems.length > 0 ? statsItems[0].closest('ul') : null;
    if (statsContainer) {
      sectionObserver.observe(statsContainer);
    }
    
    // Observer para cada elemento individual
    var itemObserver = new IntersectionObserver(function(entries) {
      entries.forEach(function(entry) {
        if (entry.isIntersecting) {
          var element = entry.target;
          var target = element.getAttribute('data-target') || '0';
          
          // Animar el contador solo si no ha sido animado o si se ha reseteado
          if (element.getAttribute('data-animated') !== 'true') {
            animateCounter(element, target, 1500);
          }
        }
      });
    }, { threshold: 0.5 }); // Umbral más alto para asegurar que está bien visible
    
    // Inicializar todos los elementos como no animados
    for (var i = 0; i < statsItems.length; i++) {
      statsItems[i].setAttribute('data-animated', 'false');
      itemObserver.observe(statsItems[i]);
    };
  });
</script>
