---
// Importing necessary components
import Meta from "@components/Meta.astro";
import Navbar from "@components/sections/navbar&footer/Navbar.astro";
import FooterSection from "@components/sections/navbar&footer/FooterSection.astro";
import FooterSection_en from "@components/sections/navbar&footer/FooterSection_en.astro";
import FooterSection_fr from "@components/sections/navbar&footer/FooterSection_fr.astro";
import FooterSection_ca from "@components/sections/navbar&footer/FooterSection_ca.astro";
import { SITE as SITE_ES } from "../data_files/constants";
import { SITE as SITE_FR } from "../data_files/fr/constants";
import "@styles/global.css";
import "../assets/styles/smooth-scroll.css";

// Select the appropriate SITE constants based on language
let SITE = SITE_ES;
if (Astro.url.pathname.startsWith("/fr")) {
  SITE = SITE_FR;
}

// Setting expected props
const {
  title = SITE.title,
  meta,
  structuredData,
  lang = "es",
  customDescription = null,
  customOgTitle = null,
  description = null,
  noIndex = false,
} = Astro.props;

// Interface to type-check the properties
interface Props {
  title?: string;
  meta?: string;
  structuredData?: object;
  lang?: string;
  customDescription?: string | null;
  customOgTitle?: string | null;
  description?: string;
  noIndex?: boolean;
}
---

<html lang={lang} class="scrollbar-hide lenis lenis-smooth scroll-pt-16" style="scroll-behavior: smooth;">
  <head>
    {/* Adding metadata to the HTML document */}
    <Meta
      meta={meta}
      structuredData={structuredData}
      customDescription={description || customDescription}
      customOgTitle={customOgTitle}
      noIndex={noIndex}
    />
    {/* Define the title of the page */}
    <title>{title}</title>
    <script is:inline>
      // Script to handle dark mode. It will check if the theme is stored in localStorage or if dark theme is preferred by system settings
      if (
        localStorage.getItem("hs_theme") === "dark" ||
        (!("hs_theme" in localStorage) &&
          window.matchMedia("(prefers-color-scheme: dark)").matches)
      ) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
    </script>
    <script>
      import "@scripts/lenisSmoothScroll.js";
      import "../assets/scripts/smooth-scroll.js";
    </script>
  </head>
  <body
    class="bg-neutral-200 selection:bg-yellow-400 selection:text-neutral-700 dark:bg-neutral-800"
  >
    {/*
    Setting up the main structure of the page.
    The Navbar is placed at the top, with a slot for the main content and FooterSection at the bottom.
    */}
    <div class="mx-auto max-w-(--breakpoint-2xl) px-4 sm:px-6 lg:px-8">
      <Navbar />
      <main>
        <slot />
      </main>
    </div>
    {lang === "en" ? <FooterSection_en /> : lang === "fr" ? <FooterSection_fr /> : lang === "ca" ? <FooterSection_ca /> : <FooterSection />}
    <script>
      // https://preline.co
      import "preline/preline.js";
    </script>
    <style>
      /* CSS rules for the page scrollbar */
      .scrollbar-hide::-webkit-scrollbar {
        display: none;
      }

      .scrollbar-hide {
        -ms-overflow-style: none;
        scrollbar-width: none;
      }
    </style>
    <!-- Scripts para el scroll suave con Lenis -->
    <script>
      import "@scripts/lenisSmoothScroll.js";
    </script>
    
    <!-- Script para manejar los formularios de contacto -->
    <script is:inline>
      document.addEventListener('DOMContentLoaded', function() {
        const contactForm = document.getElementById('contact-form');
        if (contactForm) {
          contactForm.addEventListener('submit', function(event) {
            event.preventDefault();
            
            const form = this;
            const formData = new FormData(form);
            const formStatus = document.getElementById('form-status');
            const sendingMessage = document.getElementById('sending-message');
            const successMessage = document.getElementById('success-message');
            const errorMessage = document.getElementById('error-message');
            const submitButton = form.querySelector('button[type="submit"]');
            
            // Mostrar mensaje de enviando
            if (formStatus) formStatus.classList.remove('hidden');
            if (sendingMessage) sendingMessage.classList.remove('hidden');
            if (successMessage) successMessage.classList.add('hidden');
            if (errorMessage) errorMessage.classList.add('hidden');
            if (submitButton) submitButton.disabled = true;
            
            // Enviar el formulario
            fetch(form.action, {
              method: form.method,
              body: formData,
              headers: {
                'Accept': 'application/json'
              }
            })
            .then(response => {
              if (sendingMessage) sendingMessage.classList.add('hidden');
              
              if (response.ok) {
                // Éxito
                form.reset();
                if (successMessage) successMessage.classList.remove('hidden');
                console.log('Formulario enviado con éxito');
                
                // Registrar el éxito en la consola para depuración
                console.log('Respuesta del servidor:', response);
                
                // Mostrar un mensaje en la consola para confirmar que el formulario se envió
                console.log('%cEl formulario se ha enviado correctamente', 'color: green; font-weight: bold');
                console.log('El correo debería llegar a carmen_consta@yahoo.com en breve');
              } else {
                // Error
                if (errorMessage) errorMessage.classList.remove('hidden');
                console.error('Error al enviar el formulario');
                
                // Registrar el error en la consola para depuración
                console.error('Error en la respuesta del servidor:', response);
                response.text().then(text => {
                  console.error('Contenido de la respuesta:', text);
                });
              }
            })
            .catch(error => {
              // Error de red
              if (sendingMessage) sendingMessage.classList.add('hidden');
              if (errorMessage) errorMessage.classList.remove('hidden');
              console.error('Error de red:', error);
            })
            .finally(() => {
              if (submitButton) submitButton.disabled = false;
            });
          });
        }
      });
    </script>
  </body>
</html>
